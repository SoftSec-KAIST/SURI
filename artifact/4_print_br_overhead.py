import argparse, glob, re, os
from consts import *

def parse_arguments():
    parser = argparse.ArgumentParser(description='counter')
    parser.add_argument('dataset', type=str, default='setA', help='Select dataset (setA, setC)')
    args = parser.parse_args()

    # Sanitizing arguments
    assert args.dataset in ['setA', 'setC'], 'Invalid dataset: "%s"'%(args.dataset)

    return args

################################

def is_valid_data(br1):
    if br1 == 0:
        return False
    return True

def read_branch_data(filepath):
    with open(filepath) as f:
        data = f.read()
        (br1, br2) = re.findall('Indirect Branch Sites (.*) \((.*)\)', data.split('\n')[1])[0]
        br1 = int(br1)
        br2 = int(br2)
        if not is_valid_data(data):
            return None

        return br2 / br1

# Collect data generated by 4_get_br_overhead.py.
def collect(args):
    data = {}
    for package in PACKAGES:
        stat_files = os.path.join('stat', 'bbl', args.dataset, '%s_*' % package)
        for filepath in glob.glob(stat_files):
            overhead = read_branch_data(filepath)
            if overhead is None:
                continue

            if package not in data:
                data[package] = 0, 0

            num_bins, sum_overhead = data[package]
            num_bins += 1
            sum_overhead += overhead
            data[package] = num_bins, sum_overhead

    return data

################################

# Report the percentage of average branch count overheads for Section 4.3.1 of our
# paper.
def report(data):
    print(FMT_BRANCH_HEADER)
    print(FMT_LINE)

    total_num_bins = 0
    total_overhead = 0.0
    for package in PACKAGES:
        if package not in data:
            continue

        num_bins, overhead = data[package]
        total_num_bins += num_bins
        total_overhead += overhead
        if num_bins > 0:
            avg_overhead = overhead / num_bins * 100
            print(FMT_OVERHEAD % (package, num_bins, avg_overhead)) # Report individual data per package

    if total_num_bins > 0:
        print(FMT_LINE)
        total_avg_overhead = total_overhead / total_num_bins * 100
        print(FMT_OVERHEAD % ('[+]All', total_num_bins, total_avg_overhead)) # Report overall data

if __name__ == '__main__':
    args = parse_arguments()
    data = collect(args)
    report(data)
